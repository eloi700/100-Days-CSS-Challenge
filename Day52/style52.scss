*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:root {
  font-size: 10px;
}

@mixin flex {
  display: flex;
  justify-content: center;
  align-items: center;
}

$bg-1: rgb(85, 107, 47);
$bg-2: rgb(199, 199, 199);
$pri-color: #d38a0c;

body {
  @include flex;
  min-height: 100vh;

  .frame {
    @include flex;
    height: 40rem;
    width: 40rem;
    background: $bg-1;
    border-radius: 1rem;
    box-shadow: 0.1rem 0.1rem 0.5rem rgb(0, 0, 0);
    filter: contrast(2);
    overflow: hidden;

    .container {
      position: relative;
      @include flex;
      height: 28rem;
      width: 28rem;
      background: $bg-2;
      border-radius: 0 5rem 0 5rem;
      box-shadow: -0.2rem 0.2rem 0.5rem rgba(90, 90, 90, 0.5);

      &::before {
        position: absolute;
        content: "";
        height: 30rem;
        width: 30rem;
        border: 0.3rem dashed $pri-color;
        border-radius: 0 5rem 0 5rem;
        z-index: 2;
      }

      &::after {
        content: "";
        position: absolute;
        background-color: $pri-color;
        height: 12rem;
        width: 10rem;
        border-radius: 0 5rem 0 0;
        top: -1.5rem;
        left: 19.5rem;
        z-index: -1;
      }

      .circle {
        position: absolute;
        width: 10rem;
        height: 10rem;

        .dot {
          position: absolute;
          width: 1rem;
          height: 1rem;
          top: 5rem;
          left: 5rem;

          .fill {
            width: 0.5rem;
            height: 0.5rem;
            background: $pri-color;
            box-shadow: 0.1rem 0.1rem 0.2rem rgb(0, 0, 0);
            border-radius: 50%;
          }
        }
      }

      $noOfCircles: 10;
      $noOfDots: 12;
      $radius: 30;

      @for $i from 1 through $noOfCircles {
        $base: $i - 1;
        $dotsPerCircle: ($noOfDots + ($i * 6));
        .circle-#{$i} {
          .fill {
            animation: glow 2s ease-in-out ($i/5) + s alternate infinite;
          }

          @for $x from 1 through $dotsPerCircle {
            $baseX: $x - 1;
            $angle: 360 / $dotsPerCircle;
            .dot-#{$x} {
              $deg: ($baseX * $angle) + deg;
              transform: translate3d(0, (($radius + ($base * 10)) * -1) + px, 0)
                rotate($deg);
              transform-origin: 0 ($radius + ($base * 10)) + px;
            }
          }
        }
      }

      @keyframes glow {
        0% {
          transform: scale(0);
        }
        100% {
          transform: scale(1);
        }
      }
    }
  }
}
